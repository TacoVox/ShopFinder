import java.awt.EventQueue;

import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.FlowLayout;
import java.awt.Color;
import java.awt.Insets;
import java.util.List;

import javax.swing.JLabel;
import javax.swing.JScrollPane;

import java.awt.Component;
import java.awt.ComponentOrientation;

import javax.swing.BoxLayout;
import javax.swing.JTextArea;

import java.io.File;
import java.io.IOException;

import javax.swing.JButton;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;

/**
 * Shop Finder - Result frame
 * - displays the list of stores on a map relative to the user's position
 * - displays paths to selected stores
 * - displays details of selected stores
 * @author Petronela Tanase
 *
 */
public class ResultFrame extends JFrame {

	private JPanel contentPane;
	private JLabel mapLabel;
	private JPanel listPanel;
	private DetailsPanel detailsPanel;
	private JScrollPane scrollPane;
	private String user;
	JList<String[]> storeList;
	DefaultListModel<String[]> listModel;
	JScrollPane jsp;
	private JButton walkBtn;
	private JButton bikeBtn;
	private JButton driveBtn;
	List<String[]> loadedStores;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ResultFrame frame = new ResultFrame();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame. 
	 * Most code in the constructor is generated by the Designer
	 */
	public ResultFrame() {
		
		setResizable(false);
		setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
		setTitle("Shop Finder - Search results");
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setBounds(100, 100, 1000, 700);
		//setLocationRelativeTo(null);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel leftPanel = new JPanel();
		leftPanel.setBounds(10, 11, 314, 640);
		contentPane.add(leftPanel);
		leftPanel.setLayout(null);
		
		JLabel lblYourSearchResults = new JLabel("Your search results");
		lblYourSearchResults.setVerticalAlignment(SwingConstants.BOTTOM);
		lblYourSearchResults.setBounds(10, 11, 156, 32);
		leftPanel.add(lblYourSearchResults);
		
		listPanel = new JPanel();
		listPanel.setBounds(10, 47, 294, 241);
		leftPanel.add(listPanel);
		listPanel.setLayout(new BoxLayout(listPanel, BoxLayout.X_AXIS));
		
		JPanel infoPanel = new JPanel();
		infoPanel.setBounds(10, 299, 294, 330);
		leftPanel.add(infoPanel);
		infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.X_AXIS));
		
		detailsPanel = new DetailsPanel();
		scrollPane = new JScrollPane(detailsPanel);
		scrollPane.setViewportView(detailsPanel);
		infoPanel.add(scrollPane);
		
		driveBtn = new JButton();
		driveBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				switchMap("driving");
			}
		});
		driveBtn.setIcon(new ImageIcon(ResultFrame.class.getResource("/png/car80.png")));
		driveBtn.setBounds(272, 11, 32, 32);
		driveBtn.setEnabled(false);
		leftPanel.add(driveBtn);
		
		bikeBtn = new JButton();
		bikeBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				switchMap("bicycling");
			}
		});
		bikeBtn.setIcon(new ImageIcon(ResultFrame.class.getResource("/png/riding.png")));
		bikeBtn.setBounds(240, 11, 32, 32);
		bikeBtn.setEnabled(false);
		leftPanel.add(bikeBtn);
		
		walkBtn = new JButton();
		walkBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				switchMap("walking");
			}
		});
		walkBtn.setIcon(new ImageIcon(ResultFrame.class.getResource("/png/traveler.png")));
		walkBtn.setBounds(208, 11, 32, 32);
		walkBtn.setEnabled(false);
		leftPanel.add(walkBtn);
		
		JButton mapBtn = new JButton();
		mapBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				switchMap("global");
			}
		});
		mapBtn.setMargin(new Insets(0, 0, 0, 0));
		mapBtn.setIcon(new ImageIcon(ResultFrame.class.getResource("/png/map30.png")));
		mapBtn.setBounds(176, 11, 32, 32);
		leftPanel.add(mapBtn);
		//Map container
		JPanel mapPanel = new JPanel();
		FlowLayout flowLayout = (FlowLayout) mapPanel.getLayout();
		flowLayout.setVgap(0);
		flowLayout.setHgap(0);
		mapPanel.setAlignmentY(Component.TOP_ALIGNMENT);
		mapPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
		mapPanel.setBackground(Color.LIGHT_GRAY);
		mapPanel.setLocation(334, 11);
		mapPanel.setSize(new Dimension(640, 640));
		contentPane.add(mapPanel);
		
		mapLabel = new JLabel("");
		mapLabel.setAlignmentY(Component.TOP_ALIGNMENT);
		mapPanel.add(mapLabel);
		//TESTS
		addWindowListener(new WindowAdapter() {
		      public void windowClosing(WindowEvent e) {
		        //System.out.println("window closed");
		        
		      }
		    });
	} // END ResultFrame constructor
	/*
	 * Change map type to be displayed. 
	 * If type is global get map from file. Otherwise retrieve map using MapHandler class.
	 */
	private void switchMap(String type){	
		String[] selected_store = storeList.getSelectedValue();
		if (!type.equals("global")){
				try {
					updateMap(MapHandler.getMap(user, selected_store, storeList.getSelectedIndex(), type));
				} catch (Exception e) {
					e.printStackTrace();
					showErrorMessage("Could not switch map");
				}
		}
		else {
					BufferedImage img;
					img = null;
					try {
						img = ImageIO.read(new File("temp/map.png"));
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					updateMap(new ImageIcon(img));
				
			
		}
	}
	/*
	 * Load a new map
	 */
	private void updateMap(ImageIcon map){
		//mapLabel.removeAll();
		//System.out.println(map.getImage().toString());
		mapLabel.setIcon(map);
		
	}
	//Load store list and user location in result frame
	public void loadData(String user_addr, String user_zip, List<String[]> stores){
		loadData(user_addr+" "+user_zip,stores);
	}
	public void loadData(String user,List<String[]> stores){
		//mapLabel = new JLabel(MapHandler.getMap(user_addr, stores));
		this.user = user;
		this.loadedStores = stores;
		//load global map with all stores and user location
		try {
			updateMap(MapHandler.getMap(user, stores));
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			showErrorMessage("Could not retrieve map.");
		}
		//Create list model for store list and add stores to it
		listModel = new DefaultListModel<>();
		for (int i=0;i<stores.size();i++){
			listModel.addElement(stores.get(i));
		}
		//Initialize JList from created list model
		storeList = new JList<>(listModel);
		//add custom cell renderer to jlist
		storeList.setCellRenderer(new StoreRenderer());
		//add custom list selection listener to jlist
		storeList.addListSelectionListener(new ListListener());
		//Init scrollpane from jlist
		jsp = new JScrollPane(storeList);
		//add scrollpane to container
		listPanel.add(jsp);
	} // END loadData
	/*
	 * custom list cell renderer for JList containing stores
	 */
	private class StoreRenderer extends JLabel implements ListCellRenderer<String[]> { 
		public StoreRenderer(){
			setOpaque(true);
		}
	    @Override
	    public Component getListCellRendererComponent(JList<? extends String[]> list, String[] store, int index,
	        boolean isSelected, boolean cellHasFocus) {
	    	if (isSelected) {
	    	    setBackground(list.getSelectionBackground());
	    	    setForeground(list.getSelectionForeground());
	    	} else {
	    	    setBackground(list.getBackground());
	    	    setForeground(list.getForeground());
	    	}
	        setText((index+1)+":     "+store[1]);
	        return this;
	    }  
	}
	/*
	 * Custom ListSelectionListener to handle store selection from JList
	 */
	private class ListListener implements ListSelectionListener{
		boolean activeButtons = false;
		@Override
		public void valueChanged(ListSelectionEvent e) {
			// TODO Auto-generated method stub
			detailsPanel.updateStore(((JList<String[]>)e.getSource()).getSelectedValue());
			switchMap("global");
			if (!activeButtons){
				driveBtn.setEnabled(true);
				walkBtn.setEnabled(true);
				bikeBtn.setEnabled(true);
				activeButtons = true;
			}
		}
		
	} // END ListListener
	/*
	 * Custom JPanel that displays store information.
	 */
	private class DetailsPanel extends JPanel{
		private JLabel storeName,storeAddress,phone_no;
		private final JLabel descriptionLabel = new JLabel("Description");
		//private final JLabel openingHoursLabel = new JLabel("Opening Hours");
		//private JTextArea openingHours;
		private JTextArea description;
		public DetailsPanel(){
			this.setLayout(new GridBagLayout());
			GridBagConstraints c = new GridBagConstraints();
			//Init components
			storeName = new JLabel("");
			storeAddress = new JLabel("");
			phone_no = new JLabel("");
			description = new JTextArea("");			
			//openingHours = new JTextArea("");
			//Text Area Styling
			description.setBackground(this.getBackground());
			description.setMargin(new Insets(0, 10, 0, 15));
			description.setLineWrap(true);
			description.setWrapStyleWord(true);
			//openingHours.setLineWrap(true);
			//openingHours.setWrapStyleWord(true);
			//openingHours.setMargin(new Insets(0, 10, 0, 15));
			//Set alignment
			storeName.setHorizontalAlignment(SwingConstants.CENTER);
			storeAddress.setHorizontalAlignment(SwingConstants.CENTER);
			phone_no.setHorizontalAlignment(SwingConstants.CENTER);
			descriptionLabel.setHorizontalAlignment(SwingConstants.CENTER);
			//openingHoursLabel.setHorizontalAlignment(SwingConstants.CENTER);
			//Update once
			//updateStore(store);
			//Add components to layout
			c.fill = GridBagConstraints.HORIZONTAL;
			c.weightx = 0.5;
			c.weighty = 0.5;
			c.gridx = 0;
		    c.gridy = 0;
		    c.ipady = 5;
			add(storeName,c);
			c.gridy = 1;
			add(storeAddress,c);
			c.gridy = 2;
			add(phone_no,c);
			c.gridy = 3;
			add(descriptionLabel,c);
			c.gridy = 4;
			c.anchor = GridBagConstraints.PAGE_END;
			add(description,c);
//			c.gridy = 5;
//			add(openingHoursLabel,c);
//			c.gridy = 6;
//			
//			add(openingHours,c);
			//Hide panel
			setVisible(false);
			
		}
		/*
		 * Update displayed store information
		 */
		public void updateStore(String[] store){
			storeName.setText(store[1]);
			storeAddress.setText(store[3]);
			phone_no.setText(store[2]);
			description.setText(store[4]);
			//openingHours.setText("N/A");
			//Show panel
			if (!this.isVisible()) setVisible(true);
			//Scroll to top of scroll pane
			javax.swing.SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					scrollPane.getVerticalScrollBar().setValue(0);
				}
			});
		}
	} // END DetailsPanel
	private void showErrorMessage(String message){
		JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.ERROR_MESSAGE);
	}
}
